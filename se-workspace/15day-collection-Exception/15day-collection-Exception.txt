***15일차 주요목차***

 -Stack , Queue , ArrayList 와 LinkedList
 -Exception
 
  ArrayList -> 검색에 적합 select [사유 : add를 추가할떄 임시 배열을 만들고 기존 배열에 내용을 복사에서 임시배열에 삽입하고 새로 추가된 배열도 마지막으로 삽입]
  LinkedList -> 삽입과 삭제가 빈번할 떄 적합 insert / delete ??? ArrayList 가능하지 않나? index로 찾으면 되는건데????? 
  [사유 : 삽입이나 삭제를 할떄  방안에 자기 정보 주소 값 + 앞 뒤 객체 주소 값을 가지고 있어 추가를 하거나 삭제를 할떄 주소값을 통해서 삽입이나 삭제를 하므로 적합함)
  
  Stack -> last-in-first-out (LIFO) 마지막에 추가된 요소 먼저 추출되는 자료구조 
  	     	예)객체를 생성하고 메모리 저장 가 끝날떄 그안에 있는 메소드 지역변수 메모리에서 사라지는거

  Queue -> first-in-first-out (FIFO) 가장 먼저 추가된 요소가 먼저 추출
  
 --------------------------------------------------------------------------
 Exception : Exception Handling(예외처리) 란 프로그램 실행 중 예외상황이 발생했을 때 대안 작업을 실행하고 프로그램을 정상
 			  실행시키는  것을 목적으로 한다 .

 1.try : 예외 발생 예상 지점
 2.catch : 예외 처리, 예외 발생시 대안 작업 실행하고 프로그램은 정상실행
 3.finally : 항상 실행, 예외 발생 유무 관계없이 항상 실행
 4.throw : 예외를 발생 
 5.throws : 예외를 호출한 곳으로 던진다(예외발생시)[던질까 말까 던질까 말까 던질까 말까 던질까 말까 던.. 던.. 던.. 던.. 던져 던져]  
  -throws 클래스에서 예외가 발생하면 호출 한 클래스에게 발생한 예외를 던져준다. (호출 한 클래스는 예외처리 해줘야됨 ㅇㅅㅇ) ^^7
  -원인제공자에게.... 던져..
  
  하나의 try 블럭 안에 다양한 예외가 발생하지 있으므로 여러개의 catch 구문이 가능하다 단 자식클래스에서 부모순으로 정의해야 한다.
  예외가 발생하면 바로 catch문으로 바로 보냅니다.
 
 Exception은 최대한 구체적으로 catch하는 것이 좋다