***11일차 주요목차***
 -static
 -final
 -abstract
 -interface



static
 -별도의 객체 생성 없이 메모리에 로드(적재) 프로그램 시작 첫시점에 클래스 로딩이 되고 이떄 static 정보가 적재된다.
    참고) object member는 instance variable과 non-static method 이다.
    
 static member(변수, 메서드)를 class의 member라고 한다.
 
 static은 붕어빵틀에 관련이 있다.
 class(붕어빵틀) object(붕어빵)
 
 java program 실행단계
 0. compile된 class를 실행 명령하면
 1. class loading 단계 -> method area(or class area)에 클래스 정보(package,method) 적재
 2. class 검증 단계
 3. 실행단계(interpreter or runtime) main 실행 필요시 객체 생성 -> 객체 생성할 때 Object member(즉 instance variable과 method)가 초기화되고 사용할 수 있다.
 
 static과 non-static(Object) 접근 static -> nonstatic으로 직접 접근은 불가(객체 생성이 필요)
 non-static -> static 으로 직접 접근됨
 
  ex) Person.eat(); -> 클래스명.메서드명   eat()는 static method이다

 -Class의 Member인 static 변수와 메서드는 실행 첫시점 즉 class loading 시점에 메모리에 적재된다. 즉 별도의 객체 생성이 필요없다.
 -instance variable 변수와,메서드는 객체 생성을 할 떄만 메모리에 로드되고 사용가능하다. (Object 다이나믹 == 동적)
 -static 변수와 메서드가 많을수록 class lading이 길어져 시스템이 무거워 진다.
 -생성자로 static을 초기화를 하지 못하는 이유는 static은 class loading을 할떄 메모리가 적재가 되면서 초기화 작업을 하기 떄문에  생성자에서 인스턴스는 초기화를 하데 static은 재할당
   을 한다고 개념을 가져야 됨.
   
   
  final 제어자 
   final 상수 -> 재할당 불가 ex) final int PRICE = 1; 이유 재할당 불가
   final 메서드 -> 자식이 메서드 오버라이딩 불가
   final 클래스 -> 상속 불가
   
  참고) 자바 네이밍룰 관례 camecase
   패키지명은 소문자 package step1.exam;
   클래스명은 대문자로 시작하고 합성어의 첫글자는 대문자,나머지는 소문자 BankService
   변수명은 소문자로 시작하고 합성어 첫 글자는 대문자 studentName
   메소드은 소문자로 시작하고 합성어 첫 글자는 대문자 findParsonByTel
   상수명은 대문자로 구성하고 합성어 앞에 _ 로 구성한다. MEMBER_PASS
   
abstracty6
 1)abstract class : abstract로 선언된 class는 직접 객체화 될 수 없다
  ex) abstract class Person{}
  abstract class를 사용하는 이유
     -자식 클래스(subclass)에게 유용한 멤버(속성과 기능)을 물려주고  스스로는 객체화 되지 않겠다고 선언하는 역할을 한다.
    
     위 코드를 이용해 Person p = new Person(); //error 
 2)abstract method  :  abstract로 선언된 메서드는 자식클래스에서 반드시 메소드 오버라이딩 or 구현을 해야한다. 
 					       구현하지 않으면 자신도 abstract class로 선언되어야 한다. abstract method는 구현부가 존재하지 않고 선언만 한다.
 					       클래스내에서 abstract method가 하나 이상 존재하면 그 클래스는 abstract class로 선언되어야 한다.
  ex)public abstract void study();
  3)자신의 객체는 생성을 못하게 제한을 걸고 부모의 역할을 충실히 한다 
  
  abstract method를 명시하는 이유는 상속받은 자식 클래스에게 기능 구현을 강제하기 위해서 이다.
  
 4)추상클래스 구현 이유 나만의 정리 내용  
   -공통 기능을 구현을 하지만 그 공통 기능에서 자식별로 오버라이드(재정의)가 필요한 것을 추상메소드로 바꾼다.
   -타 클래스에서 필요없는 객체 생성을 하여 호출을 방지하기 위해서 추상클래스를 구현을 한다. 추상클래스(abstract) 설정한 클래스는 객체 생성을 막는다.
    -예)부모(피자) -> (자식이 아닌 클래스) 치킨 : 피자 객체생성 호출 -> 잉 나는 치킨인디 피자를 부르네
    
 
  디자인 패턴 (설계 패턴)
  -> Template Method Design Patten (템플릿 메서드 디자인 패턴) : 부모 클래스에서 작업처리의 흐름을 정의하고 자식클래스에서 작업처리의 내용을 구체화하는 패턴
  
  
  *******12일차*******
   -interface
   -java.util.Collection
   -Set
   -List
   