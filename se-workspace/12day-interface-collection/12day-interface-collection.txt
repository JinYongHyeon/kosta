***12일차 주요목차***
interface
java.util.Collection
 -List
 -Set
 
 Review
 객체지향 주요 개념
  -Encapsulation : "public interface, private implementation" 모듈(특정한 단위)을 인터페이스와 구현부로 분리해서 정의하고 인터페이스는 공개하고 구현부는 내부의
  				 	감춘다
  -Inheritance : 부모 멤버를 물려받아 재사용 -> 생산성 향상 / 계층구조 형성을 통한 다형성 적용환경 제공  
  -Polymorphism : "One Interface, Multiple implementation" 단일한 소통방식(메세지방식)으로 다양한 객체들이 각자의 방식으로 동작하는 성질
  
static : 객체 생성없이 사용가능 - class loading시에 메모리 적재 / class member , 클래스명.static mebmer

abstract : abstract class는 자식에게 멤버를 상속시키기 위해 존재 -> 직접 객체화 될 수 없음(DB에서는 무결성) 
		   abstract method는 자식에게 구현을 강제 -> 스스로는 구현부를 가질 수 없음
		   
		   
Interface -> 인터페이스는 인터페이스를 사용하는 측과 인터페이스를 구현하는 측과의 약속
 
 다중 상속의 장점을 가지기 위한 자바기술 -> ★다양한★ 계층구조 형성을 통한 다형성 적용환경(상속의 장점 중 위를 채택하고 , 재사용을 즉 부모 멤버를 물려받는 측면의 장점은 아님)
 자바는 단일 상속을 채택, 이유는 다중상속이 지원되어 남발할 경우 객체 생성시 불필요하게 많은 정보를 로딩할 수 있기 떄문
(생성자의 super()가 호출되면서 자신의 객체 생성시 상위의 모든 객체를 먼저 생성하기 떄문)
 
특징 
 -인터페이스는 abstract class와 같이 객체화 될 수 없다.(재사용성에 무게를 두지 않는다. -> 다양한 계층구조 형성을 통한 다형성 적용이 목적)
  abstract method 와 static final 상수 , JDK 1.8 이상에는 default method와 static method만 가질 수 있다. 
    즉 객체의 멤버인 인스턴스 변수를 가질 수 없고 구현된 일반 메소드는 가질 수 없다.
    
-인터페이스 interface특징
 instance variable(객체의 멤버변수)를 가질 수 없다.
 static final 상수만 가질 수 있다.
  주로 추상메서드를 선언한다.(1.8이후) --> default method가 생겨서 그럼 ㅇㅈ..
  인터페이스끼리는 상속이 가능하다.
  인터페이스를 구현하는 클래스는 다수의 인터페이스를 구현할 수 있다.(다양한 계층구조 형성을 지원)
 jdk 1.8 버전부터는 default 제어자 명시된 구현부가 있는 메서드를 가질 수 있다.(default method가 추가된 이유는 확장성 (or 유지보수성) 을 고려)
  또한 static method는 구현부를 가질 수있다.
  
-abstract와 interface를 비교
 공통점 - 다형성을 지원  , 계층구조형성을 통해 , 사용자에게 단일한 메세지 방식을 지원할 수 있다. , 객체생성이 될 수 없다. 자식 또는 하위 클래스에게 구현을 강제할 수 있다.
 차이점 - abstract는 객체의 멤버(인스턴스 변수,메서드)를 가질 수 있다. 이러한 속성과 기능을 자식에게 물려줄 수 있다. 
       interface는 다양한 계층구조형성을 지원